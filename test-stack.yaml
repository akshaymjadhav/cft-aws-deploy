AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template for creating a Lambda Layer
    
Resources:
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref RoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchAndLayerPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - lambda:GetLayerVersion
                  - lambda:PublishLayerVersion
                Resource: '*'

  PipLayerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Create layers based on pip
      FunctionName: !Sub "PipLayer-${AWS::StackName}"
      Handler: index.handler
      MemorySize: 1024
      Role: !GetAtt IAMRole.Arn
      Runtime: python3.8
      Timeout: 300
        Code:
	  ZipFile: |
            import json
	    import logging
	    import pathlib
	    import re
	    import subprocess
	    import sys
	    import tempfile
	    import typing as t
	    import shutil
	    import cfnresponse
	    import boto3
	    logger = logging.getLogger()
	    logger.setLevel(logging.INFO)

	    def handler(event, context):
     	        logger.info('{"event": %s}', json.dumps(event))
			
  MyLayer:
    Type: Custom::PipLayer
    Properties:
      ServiceToken: !GetAtt PipLayerLambda.Arn
      Region: !Ref AWS::Region
      LayerName: mylayer
      Packages:
        - numpy==1.20
        - pandas>1.0
        - abstractcp==0.9.6
        - pillow
